# If we don't pin the compiler on windows, we get compiler syntax errors. This could be because conda-build pulls in a
# different runtime version from the compiler version, for some reason. Upstream uses 2019 on their CI, and it's our
# most recent, so let's use that.
c_compiler:                  # [win]
  - vs2019                   # [win]
cxx_compiler:                # [win]
  - vs2019                   # [win]
# This version of macOS SDK is required for certain macros used in the source code
MACOSX_SDK_VERSION:          # [(osx and x86_64)]
  - 10.15                    # [(osx and x86_64)]
MACOSX_DEPLOYMENT_TARGET:    # [(osx and x86_64)]
  - 10.15                    # [(osx and x86_64)]
CONDA_BUILD_SYSROOT:         # [(osx and x86_64)]
  - /opt/MacOSX10.15.sdk     # [(osx and x86_64)]
# openblas/osx-64 isn't currently building, but is under investigation and to be fixed in a later build.
# blas_impl is the same as in aggregate cbc.yaml otherwise.
blas_impl:
  - mkl                      # [(x86 or x86_64) and not osx]
  - openblas                 # [not win]
pytorch_variant:
  - cpu
  - gpu                      # [(osx and arm64)]
# CONDA_BUILD_SYSROOT is defined in the base cbc.yaml, but it's reflected here so we can zip the keys and
# build GPU and CPU at the same time for osx-arm64. It'll need to be manually updated here if the base cbc is changed.
# This could be done using extend_keys instead, with a change to the base cbc.yaml.
# However there's currently a conda-forge bug that prevents this: https://github.com/conda/conda-build/issues/5048
MACOSX_SDK_VERSION:          # [(osx and arm64)]
  - 11.1                     # [(osx and arm64)]
  - 12.3                     # [(osx and arm64)]
CONDA_BUILD_SYSROOT:         # [(osx and arm64)]
  - /Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk  # [(osx and arm64)]
  - /Library/Developer/CommandLineTools/SDKs/MacOSX12.3.sdk  # [(osx and arm64)]
zip_keys:                    # [(osx and arm64)]
  - pytorch_variant          # [(osx and arm64)]
  - MACOSX_SDK_VERSION       # [(osx and arm64)]
  - CONDA_BUILD_SYSROOT      # [(osx and arm64)]

# Below are the settings for linux-64 GPU. Currently, we're not building it, because we're waiting on
# Triton to be packaged and included in defaults.
# These are kept here for reference, when Triton is available.
# For linux-64, we need to pin the compiler if we're building with CUDA support (but not otherwise), see here:
# https://docs.nvidia.com/cuda/archive/11.3.0/cuda-installation-guide-linux/index.html
# We also don't build it yet on Windows, because we need magma as a dependency and there have been significant issues getting
# CMake to build magma with CUDA support.
# c_compiler_version:    # [(linux and x86_64)]
#  - 11                 # [(linux and x86_64)]
# cxx_compiler_version:  # [(linux and x86_64)]
#  - 11                 # [(linux and x86_64)]
# cudatoolkit:           # [(linux and x86_64)]
#  - 11.8               # [(linux and x86_64)]
# cudnn:                 # [(linux and x86_64)]
#  - 8.9.2.26           # [(linux and x86_64)]
