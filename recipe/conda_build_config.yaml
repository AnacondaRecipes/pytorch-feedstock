# MKL is only available on intel platforms, and it's faster on those platforms than openBLAS so we use it there.
blas_impl:
  - mkl                # [x86]
  - openblas           # [not x86]
# If we don't pin the compiler on windows, we get compiler syntax errors. This could be because conda-build pulls in a
# different runtime version from the compiler version, for some reason. Upstream uses 2019 on their CI, and it's our
# most recent, so let's use that.
c_compiler:            # [win]
  - vs2019             # [win]
cxx_compiler:          # [win]
  - vs2019             # [win]
pytorch_variant:
  - cpu
################# For GPU building, uncomment everything below and comment out the two lines above this #############
## We currently haven't implemented and tested GPU acceleration on OSX (although it's possible for osx-arm64).
## This is also the case for linux powerPC and ARM cores.
## We also don't support it on Windows, because we need magma as a dependency and on windows, CMake isnâ€™t playing ball
## with building it with CUDA support.
## So, only linux-64 for now.
## Additionally, we need to pin the compiler if we're building with CUDA support (but not otherwise), see here:
## https://docs.nvidia.com/cuda/archive/11.3.0/cuda-installation-guide-linux/index.html
# pytorch_variant:
#  - gpu                 # [linux64]
# c_compiler_version:
#   - 9                  # [linux64]
# cxx_compiler_version:
#   - 9                  # [linux64]
# cudatoolkit:
#   - 11.3
# cudnn:
#   - 8
