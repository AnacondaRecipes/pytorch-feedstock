Index: pytorch/cmake/Modules/FindMKL.cmake
===================================================================
--- pytorch.orig/cmake/Modules/FindMKL.cmake	2024-01-26 17:27:39.873470000 -0600
+++ pytorch/cmake/Modules/FindMKL.cmake	2024-01-26 17:28:07.121788213 -0600
@@ -56,6 +56,9 @@
   endif()
 ENDIF (WIN32)
 
+MESSAGE(STATUS "DEFAULT_INTEL_COMPILER_DIR = ${DEFAULT_INTEL_COMPILER_DIR}")
+MESSAGE(STATUS "DEFAULT_INTEL_MKL_DIR = ${DEFAULT_INTEL_MKL_DIR}")
+
 # Intel Compiler Suite
 SET(INTEL_COMPILER_DIR "${DEFAULT_INTEL_COMPILER_DIR}" CACHE STRING
   "Root directory of the Intel Compiler Suite (contains ipp, mkl, etc.)")
@@ -93,8 +96,8 @@
     SET(mklthreads "mkl_tbb_thread")
     SET(mklrtls "tbb")
   ELSE()
-    SET(mklthreads "mkl_gnu_thread" "mkl_intel_thread")
-    SET(mklrtls "gomp" "iomp5")
+    SET(mklthreads "mkl_intel_thread" "mkl_gnu_thread")
+    SET(mklrtls "iomp5" "gomp")
   ENDIF()
   SET(mklifaces  "intel" "gf")
 ELSE(CMAKE_COMPILER_IS_GNUCC)
@@ -111,6 +114,9 @@
   SET(mklifaces  "intel")
 ENDIF (CMAKE_COMPILER_IS_GNUCC)
 
+MESSAGE(STATUS "mklthreads = ${mklthreads}")
+MESSAGE(STATUS "mklrtls = ${mklrtls}")
+
 # Kernel libraries dynamically loaded
 SET(mklkerlibs "mc" "mc3" "nc" "p4n" "p4m" "p4m3" "p4p" "def")
 SET(mklseq)
@@ -120,6 +126,7 @@
 SET(saved_CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH})
 IF (EXISTS ${INTEL_COMPILER_DIR})
   # TODO: diagnostic if dir does not exist
+  MESSAGE(STATUS "INTEL_COMPILER_DIR exists")
   SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH}
     "${INTEL_COMPILER_DIR}/lib/${iccvers}")
   IF(MSVC)
@@ -131,11 +138,13 @@
       "${INTEL_COMPILER_DIR}/lib")
   ENDIF()
   IF (NOT EXISTS ${INTEL_MKL_DIR})
+    MESSAGE(STATUS "INTEL_COMPILER_DIR exists and INTEL_MKL_DIR doesn't exist")
     SET(INTEL_MKL_DIR "${INTEL_COMPILER_DIR}/mkl")
   ENDIF()
 ENDIF()
 IF (EXISTS ${INTEL_MKL_DIR})
   # TODO: diagnostic if dir does not exist
+  MESSAGE(STATUS "INTEL_MKL_DIR exists")
   SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH}
     "${INTEL_MKL_DIR}/include")
   SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH}
@@ -204,6 +213,13 @@
   # have been found.  Otherwise, LIBRARIES is set to FALSE.
   # N.B. _prefix is the prefix applied to the names of all cached variables that
   # are generated internally and marked advanced by this macro.
+  MESSAGE(STATUS "LIBRARIES = ${LIBRARIES}")
+  MESSAGE(STATUS "OPENMP_TYPE = ${OPENMP_TYPE}")
+  MESSAGE(STATUS "OPENMP_LIBRARY = ${OPENMP_LIBRARY}")
+  MESSAGE(STATUS "_name = ${_name}")
+  MESSAGE(STATUS "_list = ${_list}")
+  MESSAGE(STATUS "_flags = ${_flags}")
+
   SET(_prefix "${LIBRARIES}")
   # start checking
   SET(_libraries_work TRUE)
@@ -231,6 +247,7 @@
     UNSET(${_prefix}_${_library}_LIBRARY)
     IF(_libraries_work)
       IF(${_library} MATCHES "omp")
+        set(CMAKE_FIND_DEBUG_MODE On)
         IF(_openmp_type)
           MESSAGE(FATAL_ERROR "More than one OpenMP libraries appear in the MKL test: ${_list}")
         ELSEIF(${_library} MATCHES "gomp")
@@ -242,10 +259,12 @@
             # OpenMP). This doesn't necessarily mean that we have gomp... but it
             # is probably good enough since on gcc we should already have
             # OpenMP_CXX_FLAGS="-fopenmp" and OpenMP_CXX_LIB_NAMES="".
+            MESSAGE(STATUS "Found gomp")
             SET(_found_gomp true)
             FOREACH(_lib_name ${OpenMP_CXX_LIB_NAMES})
               IF (_found_gomp AND "${_lib_name}" MATCHES "iomp")
                 SET(_found_gomp false)
+                MESSAGE(STATUS "didn't find gomp")
               ENDIF()
             ENDFOREACH()
             IF(_found_gomp)
@@ -255,11 +274,13 @@
           ENDIF(OPENMP_FOUND)
         ELSEIF(${_library} MATCHES "iomp")
           SET(_openmp_type "Intel")
-          FIND_LIBRARY(${_prefix}_${_library}_LIBRARY NAMES ${_library})
+          FIND_LIBRARY(${_prefix}_${_library}_LIBRARY NAMES ${_library} REQUIRED)
+          MESSAGE(STATUS "found iomp")
           SET(_openmp_library "${${_prefix}_${_library}_LIBRARY}")
         ELSE()
           MESSAGE(FATAL_ERROR "Unknown OpenMP flavor: ${_library}")
         ENDIF()
+        set(CMAKE_FIND_DEBUG_MODE Off)
       ELSEIF(${_library} STREQUAL "tbb")
         # Separately handling compiled TBB
         SET(_found_tbb TRUE)
@@ -295,6 +316,7 @@
   # Fin
   IF(_libraries_work)
     SET(${OPENMP_TYPE} ${_openmp_type})
+    MESSAGE(STATUS "_libraries_work; OPENMP_TYPE = ${OPENMP_TYPE}")
     MARK_AS_ADVANCED(${OPENMP_TYPE})
     SET(${OPENMP_LIBRARY} ${_openmp_library})
     MARK_AS_ADVANCED(${OPENMP_LIBRARY})
@@ -325,10 +347,12 @@
 
 # First: search for parallelized ones with intel thread lib
 IF (NOT "${MKL_THREADING}" STREQUAL "SEQ")
+  MESSAGE(STATUS "*********** searching for openmp **********")
   FOREACH(mklrtl ${mklrtls} "")
     FOREACH(mkliface ${mklifaces})
       FOREACH(mkl64 ${mkl64s} "")
         FOREACH(mklthread ${mklthreads})
+          MESSAGE(STATUS "searching: MKL_LIBRARIES:${MKL_LIBRARIES}, mklrtl:${mklrtl}; mkliface:${mkliface}; mkl64:${mkl64}; mklthread:${mklthread}")
           IF (NOT MKL_LIBRARIES)
             GET_MKL_LIB_NAMES(mkl_lib_names "${mkliface}" "${mkl64}" THREAD "${mklthread}")
             CHECK_ALL_LIBRARIES(MKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
@@ -338,6 +362,7 @@
       ENDFOREACH(mkl64)
     ENDFOREACH(mkliface)
   ENDFOREACH(mklrtl)
+  MESSAGE(STATUS "*********** ending search **********")
 ENDIF (NOT "${MKL_THREADING}" STREQUAL "SEQ")
 
 # Second: search for sequential ones
@@ -368,6 +393,7 @@
 ENDFOREACH(mklrtl)
 
 IF (MKL_LIBRARIES)
+  MESSAGE(STATUS "Setting CMAKE_REQUIRED_LIBRARIES; MKL_LIBRARIES=${MKL_LIBRARIES}")
   SET(CMAKE_REQUIRED_LIBRARIES ${MKL_LIBRARIES})
   check_function_exists("cblas_gemm_bf16bf16f32" MKL_HAS_SBGEMM)
   set(CMAKE_REQUIRED_LIBRARIES)
