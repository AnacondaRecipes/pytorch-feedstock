From: James Robertson 
Date: Tue, 27 May 2025 10:30:45 +0100
Subject: [PATCH] Fix conjugated and negated views not handled
Issue: https://github.com/pytorch/pytorch/issues/150918
--- aten/src/ATen/native/LinearAlgebra.cpp	2025-05-14 10:03:31.346418371 +0100
+++ "aten/src/ATen/native/LinearAlgebra copy.cpp"	2025-05-14 10:04:47.931959605 +0100
@@ -1905,7 +1905,15 @@
   at::native::resize_output(result, {});
   TORCH_CHECK(result.scalar_type() == self.scalar_type(),
            "result dtype ", result.scalar_type(), " does not match input dtype ", self.scalar_type());
-  return result.fill_(self.dot(other));
+           
+  // Handle conjugated and negated views properly
+  auto self_tensor = self.resolve_conj();         // Always resolve to get actual tensor data
+  auto other_tensor = other.resolve_conj();       // Always resolve to get actual tensor data
+  
+  // Handle negation views
+  self_tensor = self_tensor.is_neg() ? self_tensor.resolve_neg() : self_tensor;
+  other_tensor = other_tensor.is_neg() ? other_tensor.resolve_neg() : other_tensor;
+  
+  return result.fill_(self_tensor.dot(other_tensor));
 }
 
 Tensor& vdot_out(const Tensor& self, const Tensor& other, Tensor& result) {
@@ -1921,7 +1929,16 @@
   at::native::resize_output(result, {});
   TORCH_CHECK(result.scalar_type() == self.scalar_type(),
            "result dtype ", result.scalar_type(), " does not match input dtype ", self.scalar_type());
-  return result.fill_(self.vdot(other));
+           
+  // For vdot, we need to conjugate the first argument (Hermitian operation)
+  auto self_tensor = self.conj().resolve_conj();  // Conjugate first, then resolve to get actual data
+  auto other_tensor = other.resolve_conj();       // Always resolve to get actual tensor data
+  
+  // Handle negation views
+  self_tensor = self_tensor.is_neg() ? self_tensor.resolve_neg() : self_tensor;
+  other_tensor = other_tensor.is_neg() ? other_tensor.resolve_neg() : other_tensor;
+  
+  return result.fill_(self_tensor.dot(other_tensor));
 
 static bool should_fold(const Tensor& tensor1, const Tensor& tensor2, bool has_out) {
