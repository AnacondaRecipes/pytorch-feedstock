Index: pytorch/test/distributed/elastic/timer/local_timer_test.py
===================================================================
--- pytorch.orig/test/distributed/elastic/timer/local_timer_test.py
+++ pytorch/test/distributed/elastic/timer/local_timer_test.py
@@ -224,9 +224,9 @@ if not (IS_WINDOWS or IS_MACOS or TEST_W
             self.server.stop()
             watchdog_call_count = self.server._run_watchdog.call_count
             self.assertGreaterEqual(
-                watchdog_call_count, int(wait / self.max_interval) - 1
+                watchdog_call_count, int(wait / self.max_interval) - 2
             )
-            self.assertLessEqual(watchdog_call_count, int(wait / self.max_interval) + 1)
+            self.assertLessEqual(watchdog_call_count, int(wait / self.max_interval) + 2)
 
         def test_watchdog_empty_queue(self):
             """
Index: pytorch/test/test_functional_autograd_benchmark.py
===================================================================
--- pytorch.orig/test/test_functional_autograd_benchmark.py
+++ pytorch/test/test_functional_autograd_benchmark.py
@@ -6,6 +6,7 @@ import subprocess
 import tempfile
 import os
 import unittest
+import sys
 
 PYTORCH_COLLECT_COVERAGE = bool(os.environ.get("PYTORCH_COLLECT_COVERAGE"))
 
@@ -17,7 +18,7 @@ class TestFunctionalAutogradBenchmark(Te
         # is not allowed to open it again. As this is a simple smoke test, we choose for now
         # not to run this on windows and keep the code here simple.
         with tempfile.NamedTemporaryFile() as out_file:
-            cmd = ['python3',
+            cmd = [sys.executable,
                    '../benchmarks/functional_autograd_benchmark/functional_autograd_benchmark.py']
             # Only run the warmup
             cmd += ['--num-iters', '0']
